{"version":3,"sources":["serviceWorker.js","components/Session/context.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/Session/withAuthentication.js","constants/routes.js","components/Session/withAuthorization.js","components/Session/withEmailVerification.js","components/SignOut/index.js","components/Navigation/index.js","components/SignIn/index.js","components/Home/search.js","components/Home/pickUpApi.js","components/Home/index.js","components/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","AuthUserContext","React","createContext","FirebaseContext","withFirebase","Component","props","react_default","a","createElement","Consumer","firebase","Object","assign","config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","components_Firebase","Firebase","_this","this","classCallCheck","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignInWithTwitter","twitterProvider","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doSendEmailVerification","currentUser","sendEmailVerification","url","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","objectSpread","emailVerified","providerData","db","ref","concat","users","message","messages","app","initializeApp","serverValue","database","ServerValue","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider","FacebookAuthProvider","TwitterAuthProvider","withAuthentication","WithAuthentication","_React$Component","possibleConstructorReturn","getPrototypeOf","call","state","JSON","parse","localStorage","getItem","inherits","createClass","key","value","_this2","listener","setItem","stringify","setState","removeItem","context","Provider","HOME","withAuthorization","condition","WithAuthorization","apply","arguments","history","push","compose","withRouter","withEmailVerification","WithEmailVerification","onSendEmailVerification","isSent","map","provider","providerId","includes","needsEmailVerification","type","onClick","disabled","_ref","NavigationAuth","Link","to","ROUTES","SignOut","NavigationNonAuth","Navigation","Navigation_NavigationAuth","Navigation_NavigationNonAuth","ERROR_CODE_ACCOUNT_EXISTS","ERROR_MSG_ACCOUNT_EXISTS","SignInGoogleBase","onSubmit","event","socialAuthUser","set","username","displayName","error","catch","code","preventDefault","SignInGoogle","SignIn","columns","name","title","rows","id","enter_t","exit_t","contact_t","Search","Paper","dx_react_grid_material_ui_es","dx_react_grid_es","PickUp","isLoaded","items","fetch","res","json","rates","_this$state","keys","render","pickUpApi_PickUp","document","getElementById","pickUpApi","Grid","container","alignItems","justify","item","xs","Button","variant","color","search","HashRouter","components_Navigation","Route","path","component","HomePage","SignInPage","ReactDOM","Firebase_context","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a6d141b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst AuthUserContext = React.createContext(null);\n\nexport default AuthUserContext;\n","import React from 'react';\n\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = Component => props => (\n  <FirebaseContext.Consumer>\n    {firebase => <Component {...props} firebase={firebase} />}\n  </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;\n","import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/database';\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    /* Helper */\n\n    this.serverValue = app.database.ServerValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n\n    /* Firebase APIs */\n\n    this.auth = app.auth();\n    this.db = app.database();\n\n    /* Social Sign In Method Provider */\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignInWithGoogle = () =>\n    this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () =>\n    this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignInWithTwitter = () =>\n    this.auth.signInWithPopup(this.twitterProvider);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: process.env.REACT_APP_CONFIRMATION_EMAIL_REDIRECT,\n    });\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .once('value')\n          .then(snapshot => {\n            const dbUser = snapshot.val();\n\n            // default empty roles\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            }\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              providerData: authUser.providerData,\n              ...dbUser,\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  // *** User API ***\n\n  user = uid => this.db.ref(`users/${uid}`);\n\n  users = () => this.db.ref('users');\n\n  // *** Message API ***\n\n  message = uid => this.db.ref(`messages/${uid}`);\n\n  messages = () => this.db.ref('messages');\n}\n\nexport default Firebase;\n","import FirebaseContext, { withFirebase } from './context';\nimport Firebase from './firebase';\n\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };\n","import React from 'react';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\nconst withAuthentication = Component => {\n  class WithAuthentication extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        authUser: JSON.parse(localStorage.getItem('authUser')),\n      };\n    }\n\n    componentDidMount() {\n      this.listener = this.props.firebase.onAuthUserListener(\n        authUser => {\n          localStorage.setItem('authUser', JSON.stringify(authUser));\n          this.setState({ authUser });\n        },\n        () => {\n          localStorage.removeItem('authUser');\n          this.setState({ authUser: null });\n        },\n      );\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return (\n        <AuthUserContext.Provider value={this.state.authUser}>\n          <Component {...this.props} />\n        </AuthUserContext.Provider>\n      );\n    }\n  }\n\n  return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;\n","export const SIGN_IN = '/';\nexport const HOME = '/home';\nexport const ADMIN = '/admin';\nexport const ADMIN_DETAILS = '/admin/:id';\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst withAuthorization = condition => Component => {\n  class WithAuthorization extends React.Component {\n    componentDidMount() {\n      this.listener = this.props.firebase.onAuthUserListener(\n        authUser => {\n          if (!condition(authUser)) {\n            this.props.history.push(ROUTES.SIGN_IN);\n          }\n        },\n        () => this.props.history.push(ROUTES.SIGN_IN),\n      );\n    }\n\n    componentWillUnmount() {\n      this.listener();\n    }\n\n    render() {\n      return (\n        <AuthUserContext.Consumer>\n          {authUser =>\n            condition(authUser) ? <Component {...this.props} /> : null\n          }\n        </AuthUserContext.Consumer>\n      );\n    }\n  }\n\n  return compose(\n    withRouter,\n    withFirebase,\n  )(WithAuthorization);\n};\n\nexport default withAuthorization;\n","import React from 'react';\n\nimport AuthUserContext from './context';\nimport { withFirebase } from '../Firebase';\n\nconst needsEmailVerification = authUser =>\n  authUser &&\n  !authUser.emailVerified &&\n  authUser.providerData\n    .map(provider => provider.providerId)\n    .includes('password');\n\nconst withEmailVerification = Component => {\n  class WithEmailVerification extends React.Component {\n    constructor(props) {\n      super(props);\n\n      this.state = { isSent: false };\n    }\n\n    onSendEmailVerification = () => {\n      this.props.firebase\n        .doSendEmailVerification()\n        .then(() => this.setState({ isSent: true }));\n    };\n\n    render() {\n      return (\n        <AuthUserContext.Consumer>\n          {authUser =>\n            needsEmailVerification(authUser) ? (\n              <div>\n                {this.state.isSent ? (\n                  <p>\n                    E-Mail confirmation sent: Check your E-Mails (Spam\n                    folder included) for a confirmation E-Mail.\n                    Refresh this page once you confirmed your E-Mail.\n                  </p>\n                ) : (\n                  <p>\n                    Verify your E-Mail: Check your E-Mails (Spam folder\n                    included) for a confirmation E-Mail or send\n                    another confirmation E-Mail.\n                  </p>\n                )}\n\n                <button\n                  type=\"button\"\n                  onClick={this.onSendEmailVerification}\n                  disabled={this.state.isSent}\n                >\n                  Send confirmation E-Mail\n                </button>\n              </div>\n            ) : (\n              <Component {...this.props} />\n            )\n          }\n        </AuthUserContext.Consumer>\n      );\n    }\n  }\n\n  return withFirebase(WithEmailVerification);\n};\n\nexport default withEmailVerification;\n","import React from 'react';\n\nimport { withFirebase } from '../Firebase';\n\nconst SignOutButton = ({ firebase }) => (\n  <button type=\"button\" onClick={firebase.doSignOut}>\n    サインアウト\n  </button>\n);\n\nexport default withFirebase(SignOutButton);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { AuthUserContext } from '../Session';\nimport SignOutButton from '../SignOut';\nimport * as ROUTES from '../../constants/routes';\n\nconst Navigation = () => (\n  <AuthUserContext.Consumer>\n    {authUser =>\n      authUser ? (\n        <NavigationAuth authUser={authUser} />\n      ) : (\n        <NavigationNonAuth />\n      )\n    }\n  </AuthUserContext.Consumer>\n);\n\nconst NavigationAuth = () => (\n  <ul>\n    <li>\n      <Link to={ROUTES.HOME}>Home</Link>\n    </li>\n    <li>\n      <SignOutButton />\n    </li>\n  </ul>\n);\n\nconst NavigationNonAuth = () => (\n  <h1>G Suite でログイン</h1>\n);\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { compose } from 'recompose';\n\nimport { withFirebase } from '../Firebase';\nimport * as ROUTES from '../../constants/routes';\n\nconst SignInPage = () => (\n  <div>\n    <SignInGoogle />\n  </div>\n);\n\nconst ERROR_CODE_ACCOUNT_EXISTS =\n  'auth/account-exists-with-different-credential';\n\nconst ERROR_MSG_ACCOUNT_EXISTS = `\n  An account with an E-Mail address to\n  this social account already exists. Try to login from\n  this account instead and associate your social accounts on\n  your personal account page.\n`;\n\nclass SignInGoogleBase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { error: null };\n  }\n\n  onSubmit = event => {\n    this.props.firebase\n      .doSignInWithGoogle()\n      .then(socialAuthUser => {\n        // Create a user in your Firebase Realtime Database too\n        return this.props.firebase.user(socialAuthUser.user.uid).set({\n          username: socialAuthUser.user.displayName,\n          email: socialAuthUser.user.email,\n          roles: {},\n        });\n      })\n      .then(() => {\n        this.setState({ error: null });\n        this.props.history.push(ROUTES.HOME);\n      })\n      .catch(error => {\n        if (error.code === ERROR_CODE_ACCOUNT_EXISTS) {\n          error.message = ERROR_MSG_ACCOUNT_EXISTS;\n        }\n\n        this.setState({ error });\n      });\n\n    event.preventDefault();\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <button type=\"submit\">G Suite 認証でログイン</button>\n\n      </form>\n    );\n  }\n}\n\n\nconst SignInGoogle = compose(\n  withRouter,\n  withFirebase,\n)(SignInGoogleBase);\n\nexport default SignInPage;\n\nexport { SignInGoogle };\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport {\n  SearchState,\n  IntegratedFiltering,\n} from '@devexpress/dx-react-grid';\nimport {\n  Grid,\n  Table,\n  Toolbar,\n  SearchPanel,\n  TableHeaderRow,\n} from '@devexpress/dx-react-grid-material-ui';\n\n\nconst columns = [\n  { name: 'id', title: '学籍番号' },\n  { name: 'enter_t', title: '入室時間' },\n  { name: 'exit_t', title: '退室時間' },\n  { name: 'contact_t', title: '接触時間' },\n];\nconst rows = [\n  { id: 'gp16a087', enter_t: '12:02:38', exit_t: '13:02:28', contact_t: '25:20' },\n  { id: 'gp19a072', enter_t: '13:08:23', exit_t: '14:02:28', contact_t: '30:10' },\n  { id: 'gp20a011', enter_t: '12:02:38', exit_t: '13:02:28', contact_t: '25:20' },\n  { id: 'gp19a032', enter_t: '13:08:23', exit_t: '14:02:28', contact_t: '30:10' },\n  { id: 'gp20a117', enter_t: '12:02:38', exit_t: '13:02:28', contact_t: '25:20' },\n  { id: 'gp17a072', enter_t: '13:08:23', exit_t: '14:02:28', contact_t: '30:10' },\n  { id: 'gp18a087', enter_t: '12:02:38', exit_t: '13:02:28', contact_t: '25:20' },\n  { id: 'gp19a072', enter_t: '13:08:23', exit_t: '14:02:28', contact_t: '30:10' },\n  { id: 'gp16a087', enter_t: '12:02:38', exit_t: '13:02:28', contact_t: '25:20' },\n  { id: 'gp19a083', enter_t: '13:08:23', exit_t: '14:02:28', contact_t: '30:10' },\n];\n\nconst Search = () => (\n    <Paper>\n      <Grid\n        rows={rows}\n        columns={columns}\n      >\n        <SearchState/>\n        <IntegratedFiltering />\n        <Table />\n        <TableHeaderRow />\n        <Toolbar />\n        <SearchPanel />\n      </Grid>\n    </Paper>\n);\nexport default Search","import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass PickUp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { //state初期化\n      isLoaded: false,\n      items: []\n    };\n  }\n  componentDidMount() { //render直後に行いたい処理を書くところ\n    fetch(\"https://api.exchangeratesapi.io/latest\") //api\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          isLoaded: true,\n          items: json.rates\n        });\n      });\n  }\n\n  render() {\n    var { items, isLoaded } = this.state;\n    if (!isLoaded) {\n      return <div>...Loading</div>;\n    } else {\n      return (\n        <div>\n          <ul>\n            {Object.keys(items).map(key => (\n              <li key={key}>{key} - {items[key]}</li>\n            ))}\n          </ul>\n        </div>\n      );\n    }\n  }\n}\n\nexport default PickUp;\n\nrender(<PickUp />, document.getElementById('root'));","import React from 'react';\nimport { compose } from 'recompose';\nimport { withAuthorization, withEmailVerification } from '../Session';\nimport Search from './search.js';\nimport PickUp from './pickUpApi.js';\nimport {Button, Grid} from '@material-ui/core'\n\nconst HomePage = () => (\n  <div>\n    <h1>接触人数検索</h1>\n    <PickUp />\n    <Grid container alignItems=\"center\" justify=\"center\">\n      <Grid item xs={3}>\n        <Button variant=\"contained\" color=\"primary\" >\n          検索\n        </Button>\n      </Grid>\n    </Grid>\n    <Search />\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n  </div>\n);\nconst condition = authUser => !!authUser;\n\nexport default compose(\n  withEmailVerification,\n  withAuthorization(condition),\n)(HomePage);\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport Navigation from '../Navigation';\nimport SignInPage from '../SignIn';\nimport HomePage from '../Home';\n\nimport * as ROUTES from '../../constants/routes';\nimport { withAuthentication } from '../Session';\n\nconst App = () => (\n  <Router>\n    <div>\n      <Navigation />\n      <Route path={ROUTES.HOME} component={HomePage} />\n      <Route path={ROUTES.SIGN_IN} component={SignInPage} />\n    </div>\n  </Router>\n);\n\nexport default withAuthentication(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './components/App';\nimport Firebase, { FirebaseContext } from './components/Firebase';\n\nReactDOM.render(\n  <FirebaseContext.Provider value={new Firebase()}>\n    <App />\n  </FirebaseContext.Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}